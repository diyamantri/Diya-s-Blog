---
title: "Mudra Training and Detection"
format: html
author: "Diya Mantri"
date: "2025-04-15"
---

```{=html}
<style>

.navbar {
    background: #2f5c70;
    padding: 15px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.navbar a {
    color: white;
    text-decoration: none;
    margin: 0 15px;
    font-size: 18px;
    transition: 0.3s;
  }
  
  .navbar a:hover {
    color: #bee7fa;
  }
</style>
```

<p style="font-size:10">

Team-3: Diya Mantri, Arya Mohan, Gayatri Jadhav, Rithika Amireddi, Tanmayee M

</p>

<hr>

<p>Our custom-trained model plays the perfect Chitta Swarams when it detects traditional Indian mudras. Just make a mudra to your camera, and it will recognize it and start singing the Raaga!</p>

::: {style="position: relative; display: inline-block;"}
<!-- Your iframe --> <iframe src="https://mudra-chittaswaram-classifier.netlify.app"
          width="800"
          height="800"
          style="border: 1px solid #ccc; border-radius: 12px;"
          loading="lazy"> </iframe>

<!-- Transparent clickable layer --> <a href="https://mudra-chittaswaram-classifier.netlify.app" 
     target="_blank" 
     rel="noopener noreferrer"
     style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; text-indent: -9999px; z-index: 2;"> Open full site </a>
:::

<hr>

<p>The code is only functional in a local environment when VSCode is used in conjunction with the Live Server extension. The following is just to show the functionality of the code.</p>

<details>

<summary>Click to open the sketch</summary>

<iframe src="https://editor.p5js.org/arumohan2004/sketches/rHiK7-e8M" width="775px" height="775px" style="border: 3px solid #2f5c70; border-radius: 10px;"></iframe>

</details>

<hr>

<p>**Mudra Model Project Flow**</p>

<p>

**Dataset Creation**

-   Collected hand pose images showing different mudras using both left and right hands.

-   Extracted 21 hand keypoints per image (x, y coordinates) using a hand-tracking model.

-   Stored data in a CSV format: 42 columns for keypoints + 1 column for output label (Mudra_Hand format, e.g., Mayura_L).

    </p>

    <p>**Code for File Path Nomenclature**

    This Python scriptÂ converts randomly named files into sequentially organized and correctly labeled files.

    </p>

    <details>

    <summary>Click to view the Python script</summary>

    ``` python
    import os

    def rename_with_fixed_prefix(folder_path, prefix="T3M1R"):
        """
        Renames all image files sequentially with fixed prefix and incrementing 3-digit number.
        
        Args:
            folder_path (str): Path to the folder containing images
            prefix (str): Fixed prefix for filenames (default: "T3M2L")
        """
        # Get all image files with common extensions
        image_extensions = ('.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff', '.webp')
        image_files = [f for f in os.listdir(folder_path) 
                     if f.lower().endswith(image_extensions)]
        
        # Sort files by creation time (oldest first)
        image_files.sort(key=lambda f: os.path.getctime(os.path.join(folder_path, f)))
        
        # Rename files sequentially
        for index, filename in enumerate(image_files, start=1):
            # Get file extension
            ext = os.path.splitext(filename)[1].lower()
            
            # Create new filename with fixed prefix and 3-digit number
            new_name = f"{prefix}{index:03d}{ext}"
            new_path = os.path.join(folder_path, new_name)
            
            # Handle name conflicts by finding next available number
            while os.path.exists(new_path):
                index += 1
                new_name = f"{prefix}{index:03d}{ext}"
                new_path = os.path.join(folder_path, new_name)
            
            # Rename the file
            old_path = os.path.join(folder_path, filename)
            os.rename(old_path, new_path)
            print(f"Renamed: {filename} -> {new_name}")


    rename_with_fixed_prefix(r"C:\Users\ASUS\Desktop\Main\Srishti\Sem 6\Mathematical Experiments with Code\A2_Mudra_Detection\Nomenclature_Code\Mudras\Arala\Right", "T3M1R")
    ```

    </details>

    <p>**Link to Dataset Creation Code for File Path List Generation**

    This Python script creates a JSON file that simply lists the names of the images in the folder, so easing the processing burden on the JavaScript file by removing the necessity to navigate the image directory.

    </p>

    <details>

    <summary>Click to view the Python script</summary>

    ``` python
    import os
    import json

    image_folder = r'C:\Users\ASUS\Desktop\Main\Srishti\Sem 6\Mathematical Experiments with Code\A2_Mudra_Detection\Nomenclature_Code\new-images'

    filenames = [f for f in os.listdir(image_folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    filenames.sort()

    output_path = os.path.join(image_folder, 'fileList.json')

    with open(output_path, 'w') as f:
        json.dump(filenames, f, indent=2)

    print(f'fileList.json generated with {len(filenames)} files.')
    ```

    </details>

    <p>**Link to Dataset Creation Code**

    The code is only functional in a local environment when VSCode is used in conjunction with the Live Server extension. The following is just to show the functionality of the code.</p>

    <details>

    <summary>Click to open the sketch</summary>

    <iframe src="https://editor.p5js.org/arumohan2004/sketches/qJmcT0gcx" height="775px" style="border: 3px solid #2f5c70; border-radius: 10px;"></iframe>

    </details>

<p>

**Data Validation**

-   Checked for missing or inaccurately plotted keypoints.

-   Ensured correct label formatting and consistency across rows.

-   Identified class imbalance (e.g., fewer samples of katakamukha) and to fixed it.

-   Ran data through ChatGPT for quality feedback.

</p>

<p>

**Model Training**

-   Used the formatted CSV to train a neural network model.

-   Monitored loss values to track model learning.

-   Saved trained models as .json and .bin files.

</p>

<p>

**Model Testing**

-   Tested the model with new hand keypoint data to verify predictions.

-   Observed inconsistencies across browsers (e.g., the model worked on Firefox but not Chrome).

-   Discovered potential issues with model file parsing and incorrect predictions.

</p>

<p>

**Debugging Phase**

-   Identified possible causes like:

    -   Invalid or corrupted weight files

    -   Incorrect CSV formatting (e.g., confusion between one output column vs. two)

    -   Heavy or skipped images during preprocessing

-   Noted that katakamukha images may have been bypassed due to tracking failures.

</p>

<p>

**Next Steps**

-   Debugged the image-to-CSV converter script to ensure no images are skipped.

-   Finalised the prediction algorithm and integrated it with Chitta Swarams for real-time interaction.

    </p>
